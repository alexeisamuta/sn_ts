{"version":3,"sources":["components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","DialogItem","props","path","id","className","s","dialog","active","to","name","Message","message","maxLength50","maxLengthCreator","reduxForm","form","onSubmit","handleSubmit","createField","required","Textarea","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","d","key","messagesElements","messages","m","dialogsItems","values","sendMessage","newMessageBody","mapStateToPropsForRedirect","isAuth","auth","compose","connect","actions","WrappedComponent","restProps"],"mappings":"mGACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,sGCiBnKC,EARyB,SAACC,GACrC,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OAAO,yBAAKC,UAAWC,IAAEC,OAAS,IAAMD,IAAEE,QACtC,kBAAC,IAAD,CAASC,GAAIN,GAAOD,EAAMQ,QCJnBC,EAJsB,SAACT,GAClC,OAAO,yBAAKG,UAAWC,IAAEC,QAASL,EAAMU,U,yBCDtCC,EAAcC,YAAiB,IAmBtBC,cAAoC,CAACC,KAAM,2BAA3CD,EAbT,SAACb,GACH,OACI,0BAAMe,SAAUf,EAAMgB,cAClB,6BACKC,YAA0C,qBAAsB,iBAAkB,CAACC,IAAUP,GAAcQ,MAEhH,6BACI,6CCqBDC,EAvBsB,SAACpB,GAClC,IAAIqB,EAAQrB,EAAMsB,YAEdC,EAAkBF,EAAMG,QAAQC,KAAK,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAAYlB,KAAMkB,EAAElB,KAAMmB,IAAKD,EAAExB,GAAIA,GAAIwB,EAAExB,QACrF0B,EAAmBP,EAAMQ,SAASJ,KAAK,SAAAK,GAAC,OAAI,kBAAC,EAAD,CAASpB,QAASoB,EAAEpB,QAASiB,IAAKG,EAAE5B,QAMpF,OACI,yBAAKC,UAAWC,IAAEoB,SACd,yBAAKrB,UAAWC,IAAE2B,cACZR,GAEN,yBAAKpB,UAAWC,IAAEyB,UACd,6BAAOD,IAEX,kBAAC,EAAD,CAAgBb,SAZJ,SAACiB,GACjBhC,EAAMiC,YAAYD,EAAOE,qB,uBCnB7BC,EAA6B,SAACd,GAAD,MAA0B,CACvDe,OAAQf,EAAMgB,KAAKD,S,YCQRE,sBACXC,aAPkB,SAAClB,GACnB,MAAO,CACHC,YAAaD,EAAMC,eAKhB,eAAsBkB,ODA1B,SAA+BC,GAclC,OAJqCF,YACjCJ,EAA4B,GADKI,EARiC,SAACvC,GAAW,IACzEoC,EAAwBpC,EAAxBoC,OAAWM,EAD6D,YAChD1C,EADgD,YAG7E,OAAKoC,EAEE,kBAACK,EAAqBC,GAFT,kBAAC,IAAD,CAAUnC,GAAG,gBCN1B+B,CAGblB","file":"static/js/4.8401fc90.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__22Fzw\",\"dialogsItems\":\"Dialogs_dialogsItems__1PULL\",\"active\":\"Dialogs_active__3z0xD\",\"messages\":\"Dialogs_messages__Mt37y\",\"message\":\"Dialogs_message__2x6Bs\"};","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\ntype PropsType = {\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst DialogItem: React.FC<PropsType> = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n\r\n    return <div className={s.dialog + ' ' + s.active}>\r\n        <NavLink to={path}>{props.name}</NavLink>\r\n    </div>\r\n}\r\n\r\nexport default DialogItem;\r\n","import React from 'react';\r\nimport s from './../Dialogs.module.css';\r\n\r\ntype PropsType = {\r\n    message: string\r\n}\r\nconst Message: React.FC<PropsType> = (props) => {\r\n    return <div className={s.dialog}>{props.message}</div>\r\n}\r\n\r\nexport default Message;\r\n","import React from 'react';\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, Textarea} from '../../common/FormsControls/FormsControls';\r\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\r\nimport {NewMessageFormValuesType} from '../Dialogs';\r\n\r\nconst maxLength50 = maxLengthCreator(50);\r\n\r\ntype NewMessageFormValuesKeysType = Extract<keyof NewMessageFormValuesType, string>\r\ntype PropsType = {}\r\n\r\nconst AddMessageForm: React.FC<InjectedFormProps<NewMessageFormValuesType, PropsType> & PropsType>\r\n    = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<NewMessageFormValuesKeysType>(\"Enter your message\", 'newMessageBody', [required, maxLength50], Textarea)}\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm<NewMessageFormValuesType>({form: 'dialog-add-message-form'})(AddMessageForm);\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport s from './Dialogs.module.css';\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport AddMessageForm from \"./AddMessageForm/AddMessageForm\";\r\nimport {InitialStateType} from '../../redux/dialogs-reducer';\r\n\r\ntype PropsType = {\r\n    dialogsPage: InitialStateType\r\n    sendMessage: (messageText: string) => void\r\n}\r\n\r\nexport type NewMessageFormValuesType = {\r\n    newMessageBody: string\r\n}\r\n\r\nconst Dialogs: React.FC<PropsType> = (props) => {\r\n    let state = props.dialogsPage;\r\n\r\n    let dialogsElements = state.dialogs.map( d => <DialogItem name={d.name} key={d.id} id={d.id} />  );\r\n    let messagesElements = state.messages.map( m => <Message message={m.message} key={m.id} /> );\r\n\r\n    let addNewMessage = (values: NewMessageFormValuesType) => {\r\n        props.sendMessage(values.newMessageBody);\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                { dialogsElements }\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div>{ messagesElements }</div>\r\n            </div>\r\n            <AddMessageForm onSubmit={addNewMessage} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from '../redux/redux-store';\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth\r\n} as MapPropsType);\r\n\r\ntype MapPropsType = {\r\n    isAuth: boolean\r\n}\r\ntype DispatchPropsType = {\r\n}\r\n\r\nexport function withAuthRedirect<WCP>(WrappedComponent: React.ComponentType<WCP>) {\r\n\r\n    const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to='/login'/>\r\n\r\n        return <WrappedComponent {...restProps as WCP}/>\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect<MapPropsType, DispatchPropsType, WCP, AppStateType>(\r\n        mapStateToPropsForRedirect, {})\r\n    (RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}\r\n","import React from 'react';\r\nimport {actions} from '../../redux/dialogs-reducer';\r\nimport Dialogs from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\nimport {compose} from 'redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {...actions}),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n"],"sourceRoot":""}